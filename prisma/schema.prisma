// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output = "../prisma/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String         @id @default(cuid())
  name             String?
  email            String?        @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  role             Role           @default(USER)
  phone            String?
  address          String?
  department       String?
  semester         Int?
  college          String?
  usn              String?        @unique
  profileCompleted Boolean        @default(false)
  registrations    Registration[]
  createdEvents    Event[]        @relation("CreatedBy")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id            String         @id @default(cuid())
  title         String
  description   String
  category      Category
  date          DateTime
  time          String
  location      String
  capacity      Int
  image         String?
  fee           Float
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  createdById   String
  createdBy     User           @relation("CreatedBy", fields: [createdById], references: [id])
  registrations Registration[]
}

model Registration {
  id            String            @id @default(cuid())
  userId        String
  eventId       String
  status        RegistrationStatus @default(PENDING)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  event         Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  payment       Payment?

  @@unique([userId, eventId])
}

model Payment {
  id             String        @id @default(cuid())
  registrationId String        @unique
  status         PaymentStatus @default(UNPAID)
  amount         Float
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  registration   Registration  @relation(fields: [registrationId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  COORDINATOR
  ADMIN
}

enum Category {
  CENTRALIZED
  DEPARTMENT
  CULTURAL
}

enum RegistrationStatus {
  PENDING
  CONFIRMED
  REJECTED
}

enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
}
